package org.drools.test;

import org.drools.fipa.body.content.*;
import org.drools.fipa.action.message.*;
import org.drools.fipa.action.message.types.*;
import org.drools.fipa.action.message.invokers.*;
import java.util.ArrayList;
import java.util.List;
import org.jbpm.task.HumanTaskServiceLookup;
import org.jbpm.task.TaskService;
import mil.navy.med.dzreg.service.RegistriesService;
import mil.navy.med.dzreg.service.RegistriesServicePortType;
import mil.navy.med.dzreg.types.AckType;
import mil.navy.med.dzreg.types.PersonType;
import mil.navy.med.dzreg.types.RegisterPersonRequestType;
import org.drools.fipa.action.helpers.*;

import java.util.Date;
import javax.xml.ws.BindingProvider;


global java.util.Map channels;


declare MessageDeliveredResponse
    refId : String
end

rule "Log"
when
    $o : Object()
then
    System.out.println("SESSION #1 >>> " + $o);
end

//rule "Registries Service Test"
//when
//    $o : Object()
//then
//    System.out.println("Registry Service #1 >>> " + $o);
//    RegistriesServicePortType service = new RegistriesService().getRegistriesServicePort();
//        RegisterPersonRequestType params = new RegisterPersonRequestType();
//        PersonType personType = new PersonType();
//        personType.setName("Salaboy");
//        params.setPerson(personType);
//        AckType ack = service.register(params);
//        System.out.println("ACK = "+ack);
    
    
//end

//rule "Human Task Test"
//when
//    $o : Object()
//then
//    System.out.println("HT #1 >>> " + $o);
//    TaskService taskService = HumanTaskServiceLookup.getInstance().lookup();
//    System.out.println("I've just get the Task Service = "+taskService);
    
//end



//Resolve Recipients
rule "Deliver Message Action Found"
    when
        $action: Action(actionName == "deliverMessage",
                        keySet contains "refId",
                        $refId : this["refId"],
                        keySet contains "mainRecipients",
                        $mainRecipients : this["mainRecipients"]
                        )
    then
        System.out.println("!!!! Action RefId >>> " + $refId );    
        System.out.println("!!!! Action Main Recipients >>> " + $mainRecipients );

        insert(new Recipient((String)$refId, (String)$mainRecipients));
end

rule "Resolve Subject About Entities"
    when
        $action: Action(actionName == "deliverMessage",
                        keySet contains "refId",
                        $refId : this["refId"],
                        keySet contains "subjectAbout",
                        $subjectAbout : this["subjectAbout"]
                        )

                        
                        
    then
        List ldapEntities = RecipientSplitterHelper.splitRecipients((String)$subjectAbout);
        for(Object entity : ldapEntities){
            insert(entity);
        }
end




rule "Retrieve Recipient Information"
    no-loop
    when
        $r: Recipient(channels.size == 0)
        $c: Channel (type == "IdentityResolverService", $endpoint: endpoint)
        $invoker: ChannelInvoker(type == "IdentityChannelInvoker" )
    then
        System.out.println("!!!! Resolving Identities ");
        $r = (Recipient)$invoker.invoke($endpoint, $r);
        update($r);
        
        
end

rule "Construct SMS Body"
    when
      $action: Action(actionName == "deliverMessage",
                        keySet contains "refId",
                        $refId : this["refId"],
                        keySet contains "type",
                        $type : this["type"] == "SMS",
                        keySet contains "body",
                        $body : this["body"],
                        keySet contains "header",
                        $header : this["header"]    
                        )
      not (Message(refId == $refId))                  
                            
    then
       System.out.println("!!!! Inserting Message ");
       insert(new SMSMessage((String)$refId, (String)$body, (String)$header)); 
    

end

rule "Construct EMAIL Body"
    when
      $action: Action(actionName == "deliverMessage",
                        keySet contains "refId",
                        $refId : this["refId"],
                        keySet contains "type",
                        $type : this["type"] == "EMAIL",
                        keySet contains "body",
                        $body : this["body"],
                        keySet contains "header",
                        $header : this["header"]    
                        )
      not (Message(refId == $refId))                  
                            
    then
       System.out.println("!!!! Inserting Message ");
       insert(new EMAILMessage((String)$refId, (String)$body, (String)$header)); 
    

end

rule "Construct DeliverMessage Body"
    when
      $action: Action(actionName == "deliverMessage",
                        keySet contains "refId",
                        $refId : this["refId"],
                        keySet contains "type",
                        $type : this["type"] == "DeliverMessage",
                        keySet contains "body",
                        $body : this["body"],
                        keySet contains "header",
                        $header : this["header"]    
                        )
      not (Message(refId == $refId))                  
                            
    then
       System.out.println("!!!! Inserting Alert Message ");
       insert(new AlertMessage((String)$refId, (String)$body, (String)$header)); 
    

end



rule "Invoke Channel"
    when
        $action: Action(actionName == "deliverMessage",
                        keySet contains "refId",
                        $refId : this["refId"],
                        keySet contains "conversationId",
                        $conversationId : this["conversationId"],
                        keySet contains "type",
                        $type : this["type"])
        $channel: Channel(type == $type, $endpoint: endpoint)
        $invoker: ChannelInvoker(type == $type )
        $recipient: Recipient(refId == $refId)
        String(this matches "^"+$type+":.*" ) from $recipient.channels
        $message: Message(refId == $refId)
    then
        System.out.println("!!!! Invoking channel endpoint >>> " + $channel.getEndpoint());
        System.out.println("!!!! Invoking channel for Recipient >>> " + $recipient);
        $invoker.invoke($endpoint, $message);
        insert(new MessageDeliveredResponse((String)$refId));
        retract($message);
        retract($action);
        //retract($recipient);
end

rule "Invoke Channel Via DeliverMessage Service - Hack"
    when
        $action: Action(actionName == "deliverMessage",
                        keySet contains "refId",
                        $refId : this["refId"],
                        keySet contains "conversationId",
                        $conversationId : this["conversationId"],
                        keySet contains "type",
                        $type : this["type"])
        $channel: Channel(type == $type, $endpoint: endpoint)
        $invoker: ChannelInvoker(type == $type )
        $recipient: Recipient(refId == $refId)
        $message: Message(refId == $refId)
    then
        System.out.println("Hack- !!!! Invoking channel endpoint >>> " + $channel.getEndpoint());
        System.out.println("Hack- !!!! Invoking channel for Recipient >>> " + $recipient);
        $invoker.invoke($endpoint, $message);
        insert(new MessageDeliveredResponse((String)$refId));
        retract($message);
        retract($action);
        //retract($recipient);
end


//        args.put("refId", "284d7e8d-6853-46cb-bef2-3c71e565f90d");
//        args.put("conversationId", "9571319a-dd35-459b-a337-422487d9aa8c");
//        args.put("subjectAbout", "patient1, id1, id2, id3");
//        args.put("sender", "patient33");
//        args.put("mainRecipients", "id1");
//        args.put("secondaryRecipients", "id2");
//        args.put("hiddenRecipients", "id3");
//        args.put("type", "UPDATE");
//        args.put("header", "");
//        args.put("body", "");
//        args.put("priority", "Critical");
//        args.put("deliveryDate", "Tue Oct 11 23:46:36 CEST 2011");
//        args.put("status", "100");

query deliverMessage( String $refId, String $conversationId, String $subjectabout, String $sender,
                        String $mainRecipients, String $secondaryRecipients, String $hiddenRecipients, 
                        String $type, String $header, String $body, 
                         String $priority, String $deliveryDate, String $status, String $return)
       $return:= MessageDeliveredResponse()
end


        