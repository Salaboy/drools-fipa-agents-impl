package org.drools.test;

import org.drools.fipa.body.content.*;
import org.drools.fipa.action.message.*;
import org.drools.fipa.action.message.types.*;
import org.drools.fipa.action.message.invokers.*;
import java.util.ArrayList;
import java.util.List;
import org.jbpm.task.HumanTaskServiceLookup;
import org.jbpm.task.TaskService;
global java.util.Map channels;


declare MessageDeliveredResponse
    refId : String
end

rule "Log"
when
    $o : Object()
then
    System.out.println("SESSION #1 >>> " + $o);
end

rule "Human Task Test"
when
    $o : Object()
then
    System.out.println("HT #1 >>> " + $o);
    TaskService taskService = HumanTaskServiceLookup.getInstance().lookup();
    System.out.println("I've just get the Task Service = "+taskService);
    
end


//Resolve Recipients
rule "Deliver Message Action Found"
    when
        $action: Action(actionName == "deliverMessage",
                        keySet contains "refId",
                        $refId : this["refId"],
                        keySet contains "mainRecipients",
                        $mainRecipients : this["mainRecipients"]
                        )
    then
        System.out.println("!!!! Action RefId >>> " + $refId );    
        System.out.println("!!!! Action Main Recipients >>> " + $mainRecipients );

        insert(new Recipient((String)$refId, (String)$mainRecipients));
end

rule "Retrieve Recipient Information"
    no-loop
    when
        $r: Recipient(channels.size == 0)
        $c: Channel (type == "IdentityResolverService", $endpoint: endpoint)
        $invoker: ChannelInvoker(type == "IdentityChannelInvoker" )
    then
        System.out.println("!!!! Resolving Identities ");
        $r = (Recipient)$invoker.invoke($endpoint, $r);
        update($r);
        
        
end

rule "Construct SMS Body"
    when
      $action: Action(actionName == "deliverMessage",
                        keySet contains "refId",
                        $refId : this["refId"],
                        keySet contains "type",
                        $type : this["type"] == "SMS",
                        keySet contains "body",
                        $body : this["body"],
                        keySet contains "header",
                        $header : this["header"]    
                        )
      not (Message(refId == $refId))                  
                            
    then
       System.out.println("!!!! Inserting Message ");
       insert(new SMSMessage((String)$refId, (String)$body, (String)$header)); 
    

end

rule "Construct EMAIL Body"
    when
      $action: Action(actionName == "deliverMessage",
                        keySet contains "refId",
                        $refId : this["refId"],
                        keySet contains "type",
                        $type : this["type"] == "EMAIL",
                        keySet contains "body",
                        $body : this["body"],
                        keySet contains "header",
                        $header : this["header"]    
                        )
      not (Message(refId == $refId))                  
                            
    then
       System.out.println("!!!! Inserting Message ");
       insert(new EMAILMessage((String)$refId, (String)$body, (String)$header)); 
    

end



rule "Invoke Channel"
    when
        $action: Action(actionName == "deliverMessage",
                        keySet contains "refId",
                        $refId : this["refId"],
                        keySet contains "conversationId",
                        $conversationId : this["conversationId"],
                        keySet contains "type",
                        $type : this["type"])
        $channel: Channel(type == $type, $endpoint: endpoint)
        $invoker: ChannelInvoker(type == $type )
        $recipient: Recipient(refId == $refId)
        String(this matches "^"+$type+":.*" ) from $recipient.channels
        $message: Message(refId == $refId)
    then
        System.out.println("!!!! Invoking channel endpoint >>> " + $channel.getEndpoint());
        System.out.println("!!!! Invoking channel for Recipient >>> " + $recipient);
        $invoker.invoke($endpoint, $message);
        insert(new MessageDeliveredResponse((String)$refId));
        retract($message);
        retract($recipient);
end


query deliverMessage( String $refId, String $conversationId, String $subjectabout, 
                        String $mainRecipients, String $header, String $body, 
                        String $type, String $priority, String $status, String $return)
       $return:= MessageDeliveredResponse()
end


        