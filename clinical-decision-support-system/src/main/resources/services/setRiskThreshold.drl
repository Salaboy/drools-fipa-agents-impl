package org.drools.test;


import org.drools.fipa.body.content.Action;

import org.drools.pmml_4_0.ModelMarker;



rule "Action_Request : setRiskThreshold"
when
    $a : Action( actionName == "setRiskThreshold",
                 $userId    : this["userId"],
                 $patientId : this["patientId"],
                 $modelId   : this["modelId"],
                 $type      : this["type"],
                 $value     : this["threshold"]
               )
    $h : RiskThreshold( modelId == $modelId, type == $type )
then
    retract( $a );
    $h.setThreshold( Integer.valueOf( (String) $value ) );
    update($h);
end

rule "Action_Request : setRiskThreshold II"
when
    $a : Action( actionName == "setRiskThreshold",
                 $userId    : this["userId"],
                 $patientId : this["patientId"],
                 $modelId   : this["modelId"],
                 $type      : this["type"],
                 $value     : this["threshold"]
               )
    not  RiskThreshold( modelId == $modelId, type == $type )
then
    insert( new RiskThreshold( (String) $modelId, (String) $type, Integer.valueOf( (String) $value ) ) );
    retract( $a );
end






rule "Support Threshold"
when
    ModelMarker( $mid : modelName );
    not RiskThreshold( modelId == $mid, type == "Alert" )
    ?defaultRiskThreshold( $def ; )
then
    insert( new RiskThreshold( $mid, "Alert", $def ) );
end

rule "Clean Threshold"
when
    $risk : RiskThreshold( $mid : modelId )
    not InternalResource( name == $mid )
then
    retract( $risk );
end




query setRiskThreshold( String $userId, String $patientId, String $modelId, String $type, String $threshold, int $return )
    RiskThreshold( $modelId, $type, $return ; )
end
