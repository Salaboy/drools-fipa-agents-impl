package org.kmr2.decision;

import org.drools.pmml_4_0.ModelMarker;



declare Surveyable
end

declare AskAlcoholForm extends Surveyable
@Questionable( label = "Ask for Alcohol Abuse", language = "EN" )
//@Entity(name = "AskAlcholForm")
//@Table(name = "AskAlcoholFormTable" )
    questionnaireId : String @Id  @key

    question : boolean
    @QuestionMark( type = Question.QuestionType.TYPE_BOOLEAN, label = " Do you abuse alcohol ? ", required = true )

end


declare AskDeploymentForm extends Surveyable
@Questionable( label = "Ask for Number of Deployments", language = "EN" )
//@Entity(name = "AskAlcholForm")
//@Table(name = "AskAlcoholFormTable" )
    questionnaireId : String @Id  @key

    question : String
    @QuestionMark( type = Question.QuestionType.TYPE_TEXT, label = " How many times have you been deployed ? ", required = true )
    @AllowedAnswers( values = { "0=No deployments", "1=Just once", "2+=Two or more times"  } )
end






rule "Mark"
when
then
    insert( new ModelMarker( "MockDecision", "Decision Model" ) );
end





rule "Action 1"
when
then
    DxActionTemplate a = new DxActionTemplate( java.util.UUID.randomUUID().toString() );
        a.setDescr("Ask Alcohol");
    insertLogical( a );
end


rule "Action 2"
when
then
    DxActionTemplate a = new DxActionTemplate( java.util.UUID.randomUUID().toString() );
        a.setDescr("Test Alcohol");
    insertLogical( a );
end


rule "Action 3"
when
then
    DxActionTemplate a = new DxActionTemplate( java.util.UUID.randomUUID().toString() );
        a.setDescr("Ask Num Deployments");
    insertLogical( a );
end






rule "Add actions"
salience 100
when
    $dx  : DiagnosticGuideProcess( decModel == "MockDecision", $acts : actions )
    $act : DxActionTemplate( this not memberOf $acts )
then
    $acts.add( $act );
    update( $dx );
end



















rule "Close step"
salience 10
when
    $dx     : DiagnosticGuideProcess( $id : id, $steps : steps, $num : steps.size() )
    $x      : DxStep( dxProcessId == $id, step > 0, step == $num )
    $prev   : DxDecision( this memberOf $steps, current == true )
then
    System.out.println( "Closing " + $prev );
    $prev.setCurrent( false );
    retract( $prev );
end

rule "Create step"
no-loop
when
    $dx     : DiagnosticGuideProcess( $id : id, $steps : steps, $num : steps.size() )
    $x      : DxStep( dxProcessId == $id, step == $num )
then
    System.out.println( "Creating new step " + $steps.size() );
    DxDecision step = new DxDecision( java.util.UUID.randomUUID().toString() );
        step.setStep( $steps.size() );
        step.setCurrent( true );
        step.setChildren( new java.util.ArrayList() );
    $steps.add( step );
    update( $dx );
    insertLogical( step );
end


query isUseful( DxAction $act, Double $use )
    $use := Double() from Math.random()
end


rule "Clone Actions"
when
    $dx     : DiagnosticGuideProcess( $id : id, $acts : actions, $steps : steps )
    $x      : DxStep( dxProcessId == $id, $n : step )
    $step   : DxDecision( step == $n, this memberOf $steps, $childz : children, current == true )
    $act    : DxActionTemplate( this memberOf $acts )
              ?isUseful( $act, $util ; )
then
    System.out.println(" Clone action " + $act );
    DxAction act = new DxAction( java.util.UUID.randomUUID().toString() );
        act.setDescr( $act.getDescr() );
        act.setUtility( $util );
        act.setStatus( "Not Started" );
        act.setUtilityLing( "tbd " + act.getUtility() );
    $childz.add( act );
end








rule "Remove step marker"
salience -9999
when
    $x : DxStep()
then
    retract( $x );
end
